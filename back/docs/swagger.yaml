basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Category:
    properties:
      category_name:
        type: string
      created_user:
        $ref: '#/definitions/model.User'
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sub_categories:
        items:
          $ref: '#/definitions/model.SubCategory'
        type: array
      updatedAt:
        type: string
      view_order:
        type: integer
    type: object
  model.CategoryResponse:
    properties:
      category_name:
        type: string
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sub_categories:
        items:
          $ref: '#/definitions/model.SubCategory'
        type: array
      updatedAt:
        type: string
      view_order:
        type: integer
    type: object
  model.CreateCategoryRequest:
    properties:
      category_name:
        type: string
      view_order:
        type: integer
    type: object
  model.CreateSubCategoryRequest:
    properties:
      category_id:
        type: integer
      sub_category_name:
        type: string
      view_order:
        type: integer
    type: object
  model.CsrfTokenResponse:
    properties:
      csrf_token:
        type: string
    type: object
  model.Grade:
    properties:
      correction:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      good_status:
        type: boolean
      id:
        type: integer
      question:
        $ref: '#/definitions/model.Question'
      question_id:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.Question:
    properties:
      answer:
        type: integer
      created_user:
        $ref: '#/definitions/model.User'
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      grades:
        items:
          $ref: '#/definitions/model.Grade'
        type: array
      id:
        type: integer
      selection_1:
        type: string
      selection_2:
        type: string
      selection_3:
        type: string
      selection_4:
        type: string
      statement:
        type: string
      sub_category:
        $ref: '#/definitions/model.SubCategory'
      sub_category_id:
        type: integer
      title:
        type: string
      updated_user:
        $ref: '#/definitions/model.User'
      updated_user_id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.QuestionResponse:
    properties:
      answer:
        type: boolean
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      selection_1:
        type: string
      selection_2:
        type: string
      selection_3:
        type: string
      selection_4:
        type: string
      statement:
        type: string
      sub_category_id:
        type: integer
      title:
        type: string
      updated_user_id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.SubCategory:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      category_id:
        type: integer
      created_user:
        $ref: '#/definitions/model.User'
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      sub_category_name:
        type: string
      updatedAt:
        type: string
      view_order:
        type: integer
    type: object
  model.SubCategoryResponse:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      created_user_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      sub_category_name:
        type: string
      updatedAt:
        type: string
      view_order:
        type: integer
    type: object
  model.User:
    properties:
      created_categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      created_questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
      created_sub_categories:
        items:
          $ref: '#/definitions/model.SubCategory'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      grades:
        items:
          $ref: '#/definitions/model.Grade'
        type: array
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      updateed_questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
    type: object
  model.UserCreateRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://twitter.com/Chuke_yamaha
  description: Api for IchimonItto App
  title: IchimonItto API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: 登録されているすべてのカテゴリを検索し、結果を返します。
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CategoryResponse'
            type: array
      summary: すべてのカテゴリの検索
      tags:
      - category
    post:
      consumes:
      - application/json
      description: 新しいカテゴリを作成します。
      parameters:
      - description: Create Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CategoryResponse'
      summary: カテゴリの作成
      tags:
      - category
  /categories/{categoryId}:
    get:
      consumes:
      - application/json
      description: 指定されたIDを持つカテゴリを検索し、結果を返します。
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryResponse'
      summary: カテゴリIDによる検索
      tags:
      - category
  /csrf:
    get:
      consumes:
      - application/json
      description: CSRFトークンを取得する。
      produces:
      - application/json
      responses:
        "200":
          description: OK - CSRF token provided
          schema:
            $ref: '#/definitions/model.CsrfTokenResponse'
      summary: CSRFトークンを取得する。
      tags:
      - security
  /login:
    post:
      consumes:
      - application/json
      description: クッキーにログインセッションを記録する。
      parameters:
      - description: Login Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK - Successfully authenticated
        "400":
          description: Bad Request - Invalid request format or parameters
          schema:
            type: string
        "401":
          description: Unauthorized - Invalid login credentials
          schema:
            type: string
      summary: ログイン
      tags:
      - users
  /logout:
    get:
      consumes:
      - application/json
      description: クッキーに格納されているログインセッションを削除する。
      produces:
      - application/json
      responses:
        "204":
          description: No Content - Successfully logged out
      summary: ログアウト
      tags:
      - users
  /questions:
    get:
      consumes:
      - application/json
      description: 登録されているすべての問題を検索し、結果を返します。
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.QuestionResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: すべての問題の検索
      tags:
      - question
    post:
      consumes:
      - application/json
      description: 新しい問題を作成し、データベースに保存します。
      parameters:
      - description: Create Question
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/model.Question'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.QuestionResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: 新しい問題の作成
      tags:
      - question
  /questions/{questionId}:
    get:
      consumes:
      - application/json
      description: 指定されたIDを持つ問題を検索し、結果を返します。
      parameters:
      - description: Question ID
        in: path
        name: questionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestionResponse'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: 問題IDによる検索
      tags:
      - question
  /questions/category/{categoryId}:
    get:
      consumes:
      - application/json
      description: 指定されたカテゴリIDに属する問題をすべて検索し、結果を返します。
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.QuestionResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: カテゴリIDに基づく問題の検索
      tags:
      - question
  /questions/subcategory/{subCategoryId}:
    get:
      consumes:
      - application/json
      description: 指定されたサブカテゴリIDに属する問題をすべて検索し、結果を返します。
      parameters:
      - description: SubCategory ID
        in: path
        name: subCategoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.QuestionResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: サブカテゴリIDに基づく問題の検索
      tags:
      - question
  /questions/user/{createdUserId}:
    get:
      consumes:
      - application/json
      description: 指定された作成者IDで作成された問題をすべて検索し、結果を返します。
      parameters:
      - description: Created User ID
        in: path
        name: createdUserId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.QuestionResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: 作成者IDに基づく問題の検索
      tags:
      - question
  /signup:
    post:
      consumes:
      - application/json
      description: 新しいユーザーを登録します。
      parameters:
      - description: Register User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: ユーザー登録
      tags:
      - users
  /subcategories:
    post:
      consumes:
      - application/json
      description: 新しいサブカテゴリを作成します。
      parameters:
      - description: Create SubCategory
        in: body
        name: subCategory
        required: true
        schema:
          $ref: '#/definitions/model.CreateSubCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.SubCategoryResponse'
      summary: サブカテゴリの作成
      tags:
      - category
schemes:
- https
swagger: "2.0"
